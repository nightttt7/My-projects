\name{sltool}
\alias{sltool}
\title{sltool}
\usage{
'Please use? function name to view'
}
\description{
Service loan utility function, including:

Get.sql: Read the sql query statement from the folder where the sql file is placed, then connect impala, run the sql statement, and return the obtained data;

Multiplot: combine multiple charts to display;

To_excel: generate multiple data.frame and descriptive statements according to the required format to generate excel;

Csv_rep: Read the encoding table according to the folder where the csv file is placed, and return the input encoding to the corresponding value.
}
\examples{
'Please use? function name to view'
}





\name{run.sql}
\alias{run.sql}
\title{
Run.sql
}
\description{
Read the sql query statement from the folder where the sql file is placed, then connect impala, run the sql statement, and return the acquired data.

Contains two versions: run.sql and run.sql2, the difference is detailed

The sql file in the folder (.txt, .sql, etc. can be suffixed), please increase the number prefix in the order of operation, such as 1_, 2_, this order will be called 'sql number' later.

For ease of operation, keep the numeric prefix consistent with sql, using consecutive positive integers

Use multiple SQL statements that only execute (such as adding, deleting, or refreshing, etc.). Separate the statements that need to get the query data. Please put them in a separate file.

Run.sql: only one sql file that needs to get the query data

Run.sql2: multiple sql files that need to get query data
}
\usage{
Run.sql(sqls_path = "./sqls", exe = 0, get = 1, uid, pwd)
}
\arguments{
  \item{sqls_path}{
  Store the address of the sql folder, the default is the sqls folder under the working directory

  Please use absolute address or relative address (use ./path for the folder below the working directory, ../path for the folder with the same path as the working directory)
}
  \item{exe}{
  Only need to execute the sql file sql number, such as 3, such as 1:5, such as 3:4

  The default is 0, there is no sql file that only needs to be executed.
}
  \item{get}{
  Run.sql: The sql number of the sql file that needs to get the query data (only one), such as 3, such as 5

  Run.sql2: The sql number of the sql file that needs to get the query data, such as 1:2, such as 3:5

  The default is 1, run sql file with sql number 1 or the only sql file
}
  \item{uid}{
  Impala account
}
  \item{pwd}{
  Impala password
}
}
\value{
  Run.sql: data obtained from impala in the form of data.frame

  Run.sql2: The data obtained from impala, in the form of list(data.frame, data.frame), which is the data frame put into the list.
}

\examples{
```
  The following file is in the sqls folder under the working directory.

  [1] "1_tmp_sqq_main.sql" "2_tmp_sqq_mabl.sql" "3_tmp_sqq_maru.sql"

  [4] "4_tmp_sqq_macu.sql" "5_tmp_sqq_maoth.sql" "6_bak_sqq_custom_qual.sql"

  [7] "7_getdata.sql"

  Where "7_getdata.sql" has a statement that needs to get the query data.

  ---------------------------------------------

  Library(sltool)

  Df <- run.sql(exe = 1:6, get = 7, uid = "xxxxxx", pwd = "xxxxxx")

  ---------------------------------------------

  The following file is in the sqls folder under the working directory.

  [1] "1_tmp_sqq_main.sql" "2_getdata.sql" "3_getdata.sql"

  [4] "4_getdata.sql"

  The last three have statements that need to get the query data.

  ---------------------------------------------

  Library(sltool)

  Dflist <- run.sql(exe = 1, get = 2:4, uid = "xxxxxx", pwd = "xxxxxx")
```
}






\name{csv_rep}
\alias{csv_rep}
\title{
Csv_rep
}
\description{
Read the encoding table according to the folder in which the csv file is placed, and return the input encoding to the corresponding value.
Can be combined with data.frame and data.table, replace the entire column of data by coding table
}
\usage{
Csv_rep(x, csvp = "./csvs", csvf, acol = 1, bcol = 2)
}
\arguments{
  \item{x}{
  Input code
}
  \item{csvp}{
  Path to the folder where csv is located
}
  \item{csvf}{
  Csv file name
}
  \item{acol}{
  Csv encoding in the column
}
  \item{bcol}{
  Csv median column
}
}

\value{
  Corresponding value
}











\name{multiplot}
\alias{multiplot}
\title{
Multiplot
}
\description{
Combine multiple charts to display, based on the grid package
}
\usage{
Multiplot(..., plotlist = NULL, cols = 1, layout = NULL)
}
\arguments{
  \item{\dots}{
Multiple plot objects (for plot, ggplot2, etc.)
}
  \item{plotlist}{
a list of multiple plot objects
}
  \item{cols}{
The number of charts displayed per line
}
  \item{layout}{
Layout, see grid layout format
}
}

\value{

}











\name{to_excel}
\alias{to_excel}
\title{
To_excel
}
\description{
Generate multiple excels of data.frame and descriptive statements according to the required format
}
\usage{
To_excel(output, xlpath = "test.xlsx", sheetname = "sheet", restyle = TRUE, pp_locs = 0, hl_locs = 0)
}
\arguments{
  \item{output}{
  The list of elements is character or data.frame

  For example: list('text 1', df1, 'text 2', 'text 3', df2, df3)
}
  \item{xlpath}{
  The full file name of the excel that needs to be exported (including the path)

  For example: './excels/test.xlsx'
}
  \item{sheetname}{
  Excel sheet name
}
  \item{restyle}{
  TURE/FALSE, do you need to change the format?
}
  \item{pp_locs}{
  Fill in restyle=TRUE, you need to change the format to a percentage of cells

  The form is list(list(1,1),list(2:5,2),list(6,5:10))

  The format not supported by the internal list: list(1:5, 1:5)
}
  \item{hl_locs}{
  Fill in restyle=TRUE, you need to change the cell formatted as highlight (highlight)

  The form is list(list(1,1),list(2:5,2),list(6,5:10))

  The format not supported by the internal list: list(1:5, 1:5)
}
}

\value{
  No return value

  Generate excel under the specified path
}

\examples{
```
#data to output
Output <- list(
  'Application amount',
  Df1,
  'Passing rate',
  Df2,
  Df3
)
# excelpath,sheetname,hl_locs,pp_locs
Xlpath <- "test.xlsx")
Sheetname <- 'test'
Hl_locs <- list(
  List(1,1),
  List(5,1)
  )
Pp_locs <- list(
  List(2,1:5),
  List(3,1:5)
  )
#output to excel
To_excel(output,xlpath,sheetname,hl_locs=hl_locs, pp_locs=pp_locs)
```
}
