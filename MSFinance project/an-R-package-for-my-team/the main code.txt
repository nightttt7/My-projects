Read.char <- function(file,sep = ';') {
  Char <- readChar(con = file, nchars = file.info(file)$size)
  Chars <- strsplit(char,sep)
  Return(chars[[1]])
}

Exe.sql <- function(conn,sql_file_list) {
  For (sql_file in sql_file_list) {
    For (sql in read.char(sql_file)) {
      RODBC::sqlQuery(conn,sql)
    }
  }
}

Get.sql <- function(conn,sql_file_list) {
  For (sql_file in sql_file_list) {
    For (sql in read.char(sql_file)) {
      Result <- RODBC::sqlQuery(conn,sql)
      Return(result)
    }
  }
}

Run.sql <- function(sqls_path = './sqls', exe = 0, get = 1, uid, pwd) {
  Setwd(sqls_path)
  Conn <- RODBC::odbcConnect('impalaodbc', uid = uid, pwd = pwd,
                      believeNRows = FALSE, DBMSencoding = "UTF-8")
  Sql_file_list <- list.files()
  If (exe != 0) {
    Exe.sql(conn,sql_file_list[exe])
  }
  Result <- get.sql(conn,sql_file_list[get])
  RODBC::odbcClose(conn)
  Setwd('..')
  Return(result)
}

Run.sql2 <- function(sqls_path = './sqls', exe = 0, get = 1, uid, pwd) {
  Setwd(sqls_path)
  Conn <- RODBC::odbcConnect('impalaodbc', uid = uid, pwd = pwd,
                             believeNRows = FALSE, DBMSencoding = "UTF-8")
  Sql_file_list <- list.files()
  If (exe != 0) {
    Exe.sql(conn,sql_file_list[exe])
  }
  Result <- list()
  For (i in get) {
    Result[[i]] <- get.sql(conn,sql_file_list[i])
  }
  RODBC::odbcClose(conn)
  Setwd('..')
  Return(result)
}



Csv_rep <- function(x,csvp='./csvs',csvf,acol=1,bcol=2) {
  Setwd(csvp)
  Df <- read.csv(csvf,header = FALSE,stringsAsFactors=FALSE)
  l <- as.list(df[,bcol],stringsAsFactors=FALSE)
  Names(l) <- df[,acol]
  Setwd('..')
  Return(l[[x]])
}

# Use with ggplot2
Multiplot <- function (..., plotlist = NULL, cols = 1, layout = NULL)
{
  # Import grid
  Require(grid)
  Plots <- c(list(...), plotlist)
  numPlots = length(plots)
  If (is.null(layout))
    Layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     Ncol = cols, nrow = ceiling(numPlots/cols), byrow=TRUE)
  If (numPlots == 1) {
    Print(plots[[1]])
  }
  Else {
    Grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout),,
                                               Ncol(layout))))
    For (i in 1:numPlots) {
      Matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      Print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      Layout.pos.col = matchidx$col))
    }
  }
}



# output: list containing character and data.frame
# xlpath: Output the path of excel, the default is 'current path /test.xlsx'
# sheetname:excel sheet name, default is 'sheet'
To_excel <- function(output,xlpath='test.xlsx',sheetname='sheet',restyle=TRUE,pp_locs=0,hl_locs=0){
  # Import XLConnect
  Require(XLConnect)
  # creatxl: Create a book and sheet
  Createxl <- function(){
    If(file.exists(xlpath)){file.remove(xlpath)}
    Book <- loadWorkbook(xlpath, create = TRUE)
    Book$createSheet(name = sheetname)
    Return(book)
  }
  # style:Custom format
  Style <- function(){
    setStyleAction(book, XLC$"STYLE_ACTION.NAME_PREFIX")
    setStyleNamePrefix(book, "s1")
    #total setting
    s1.Numeric <- createCellStyle(book, name = "s1.Column.Numeric")
    s1.String <- createCellStyle(book, name = "s1.Column.String")
    s1.Boolean <- createCellStyle(book, name = "s1.Column.Boolean")
    s1.DateTime <- createCellStyle(book, name = "s1.Column.DateTimec")
    setBorder(s1.Numeric, side = "all", type = XLC$"BORDER.THIN", color = XLC$"COLOR.BLACK")
    setBorder(s1.String, side = "all", type = XLC$"BORDER.THIN", color = XLC$"COLOR.BLACK")
    setBorder(s1.Boolean, side = "all", type = XLC$"BORDER.THIN", color = XLC$"COLOR.BLACK")
    setBorder(s1.DateTime, side = "all", type = XLC$"BORDER.THIN", color = XLC$"COLOR.BLACK")
    #Header setting
    s1.Header <- createCellStyle(book, name = "s1.Header")
    setFillPattern(s1.Header, fill = XLC$"FILL.SOLID_FOREGROUND")
    setFillForegroundColor(s1.Header, color = XLC$"COLOR.LIGHT_CORNFLOWER_BLUE")
    setBorder(s1.Header, side = "all", type = XLC$"BORDER.THIN", color = XLC$"COLOR.BLACK")

    # Adjust cell size
    wrapStyle <- createCellStyle(book)
    setWrapText(wrapStyle, wrap = TRUE)
    setColumnWidth(book, sheet = sheetname, col = 1 , width = 5000)
    setColumnWidth(book, sheet = sheetname, col = 2:20 , width = 2800)
  }
  # append_block: Add multiple combinations of strings and data blocks
  Append_block <- function(output){
    Row <- 1
    For (x in output){
      X.df <- x
      For (x.1 in x){
        X.ischar <-is.character(x.1)
      }
      If (x.ischar){
        X.df <- data.frame(c(1))
        Names(x.df)=c(x)
      }
      writeWorksheet(book, x.df, sheet = sheetname, startRow = row, startCol = 1)
      Row_add <- ifelse(is.character(x), 1, nrow(x)+2)
      Row <- row + row_add
    }
  }

  # restyle2 and restyle3: modify the format of a specific location
  # restyle2:%
  Restyle2 <- function(locs){
    setStyleAction(book, XLC$"STYLE_ACTION.XLCONNECT")
    s <- createCellStyle(book)
    setDataFormat(s, format = "0.00%")
    setBorder(s, side = "all", type = XLC$"BORDER.THIN", color = XLC$"COLOR.BLACK")
    # format to cell
    For (loc in locs) {
      setCellStyle(book, sheet = sheetname, row = loc[[1]] , col = loc[[2]], cellstyle = s)
    }
  }
  # restyle3:Highlighting
  Restyle3 <- function(locs){
    setStyleAction(book, XLC$"STYLE_ACTION.XLCONNECT")
    s <- createCellStyle(book)
    setFillPattern(s, fill = XLC$"FILL.SOLID_FOREGROUND")
    setFillForegroundColor(s, color = XLC$"COLOR.ORANGE")
    # format to cell
    For (loc in locs) {
      setCellStyle(book, sheet = sheetname, row = loc[[1]], col = loc[[2]], cellstyle = s)
    }
  }
  # main
  Book <- createxl()
  Style()
  Append_block(output)
  If (restyle == TRUE) {
    Restyle2(pp_locs)
    Restyle3(hl_locs)
  }
  saveWorkbook(book)
}
